package com.opencontext.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.util.UUID;

/**
 * Structured document chunk for Elasticsearch indexing and storage.
 * Contains content, embeddings, and hierarchical metadata for semantic search.
 */
@Schema(description = "Elasticsearch document structure for structured chunks")
@Getter
@Builder
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
public class StructuredChunk {

    /**
     * Unique identifier for the chunk, identical to PostgreSQL document_chunks.id.
     * This maintains data consistency between relational and search stores.
     */
    @Schema(description = "Unique chunk identifier", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotNull
    private UUID chunkId;

    /**
     * UUID of the source document this chunk belongs to.
     * Used for filtering and document-level operations.
     */
    @Schema(description = "Source document identifier", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotNull
    private UUID sourceDocumentId;

    /**
     * Original filename of the source document.
     * Provides context for users to identify document source.
     */
    @Schema(description = "Original filename of source document", example = "spring-security-guide.pdf")
    private String originalFilename;

    /**
     * The actual text content of this chunk.
     * This is the primary searchable content processed by Korean Nori analyzer.
     */
    @Schema(description = "Text content of the chunk", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotBlank
    private String content;

    /**
     * 1024-dimensional embedding vector for semantic search.
     * Generated by Qwen3-Embedding-0.6B model via Ollama.
     * Uses float[] for optimal performance with Elasticsearch dense_vector type.
     */
    @Schema(description = "Embedding vector for semantic search (1024 dimensions)")
    private float[] embedding;

    /**
     * Metadata containing hierarchical and contextual information.
     * Separated into its own class following PRD coding standards.
     */
    @Schema(description = "Chunk metadata including hierarchy and context")
    @NotNull
    private ChunkMetadata metadata;
}