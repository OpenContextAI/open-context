package com.opencontext.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.Map;

/**
 * Structured document chunk for Elasticsearch indexing and storage.
 * Contains content, embeddings, and hierarchical metadata for semantic search.
 */
@Schema(description = "Elasticsearch document structure for structured chunks")
@Getter
@Builder(toBuilder = true)
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
public class StructuredChunk {

    /**
     * Unique identifier for the chunk.
     */
    @Schema(description = "Unique chunk identifier", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotBlank
    private String chunkId;

    /**
     * UUID of the source document this chunk belongs to.
     */
    @Schema(description = "Source document identifier", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotBlank
    private String documentId;

    /**
     * The actual text content of this chunk.
     */
    @Schema(description = "Text content of the chunk", requiredMode = Schema.RequiredMode.REQUIRED)
    @NotBlank
    private String content;

    /**
     * Title or heading of the section this chunk belongs to.
     */
    @Schema(description = "Section title or heading")
    private String title;

    /**
     * Hierarchy level of this chunk (1 = root, 2 = first level, etc.).
     */
    @Schema(description = "Hierarchy level in document structure")
    private Integer hierarchyLevel;

    /**
     * ID of the parent chunk if this is a sub-chunk.
     */
    @Schema(description = "Parent chunk identifier for hierarchical structure")
    private String parentChunkId;

    /**
     * Type of the original document element (Title, Header, NarrativeText, etc.).
     */
    @Schema(description = "Original element type from document parsing")
    private String elementType;

    /**
     * Embedding vector for semantic search.
     * Generated by embedding model via Ollama.
     */
    @Schema(description = "Embedding vector for semantic search")
    private List<Double> embedding;

    /**
     * Additional metadata from document parsing.
     */
    @Schema(description = "Additional metadata from document parsing")
    private Map<String, Object> metadata;
}