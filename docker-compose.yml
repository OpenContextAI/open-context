services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    platform: linux/amd64
    container_name: postgres
    environment:
      POSTGRES_DB: opencontext
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - opencontext-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Elasticsearch with Nori plugin
  elasticsearch:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - opencontext-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Ollama Model Downloader
  ollama-init:
    image: ollama/ollama:latest
    platform: linux/amd64
    container_name: opencontext-ollama-init
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - opencontext-network
    environment:
      - OLLAMA_HOST=0.0.0.0
    entrypoint: /bin/sh
    command: -c "ollama serve & sleep 10 && ollama pull dengcao/Qwen3-Embedding-0.6B:F16 && echo 'Model download completed' && pkill ollama"

  # Ollama Server for embeddings
  ollama:
    image: ollama/ollama:latest
    platform: linux/amd64
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - opencontext-network
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=1
    depends_on:
      - ollama-init
    runtime: nvidia
    restart: unless-stopped

  # Kibana for Elasticsearch management
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    platform: linux/amd64
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - opencontext-network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    platform: linux/amd64
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123!
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - opencontext-network
    restart: unless-stopped

  # Unstructured.io API for document parsing
  unstructured-api:
    image: quay.io/unstructured-io/unstructured-api:latest
    platform: linux/amd64
    container_name: unstructured-api
    ports:
      - "8000:8000"
    environment:
    - UNSTRUCTURED_MEMORY_FREE_MINIMUM_MB=512
    networks:
      - opencontext-network
    restart: unless-stopped

  # Spring Boot Core Service
  open-context-core:
    build:
      context: ./core
      dockerfile: Dockerfile
    image: opencontext/core:0.1.0
    container_name: open-context-core
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      ollama:
        condition: service_started
      unstructured-api:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - opencontext-network
    restart: unless-stopped

  # Mock Server for testing
  open-context-mock-server:
    build:
      context: ./mcp-adapter
      dockerfile: Dockerfile
    image: opencontext/mcp-adapter:0.1.0
    container_name: open-context-mock-server
    ports:
      - "8001:8001" 
    command: ["npm", "run", "mock"]
    environment:
      - MOCK_SERVER_PORT=8001  
    networks:
      - opencontext-network
    restart: unless-stopped

  # Node.js MCP Adapter
  open-context-mcp-adapter:
    build:
      context: ./mcp-adapter
      dockerfile: Dockerfile
    image: opencontext/mcp-adapter:0.1.0
    container_name: open-context-mcp-adapter
    ports:
      - "3000:3000"
    environment:
      - OPENCONTEXT_CORE_URL=http://open-context-core:8080  
      - OPENCONTEXT_DEFAULT_TOP_K=5
      - OPENCONTEXT_DEFAULT_MAX_TOKENS=25000
      - MCP_SERVER_PORT=3000
      - MCP_MODE=http
    depends_on:
      - open-context-core  
    networks:
      - opencontext-network
    command: ["node", "dist/index.js", "--transport", "http", "--port", "3000"]
    restart: unless-stopped

  # Admin UI Frontend
  open-context-admin-ui:
    build:
      context: ./admin-ui
      dockerfile: Dockerfile
    image: opencontext/admin-ui:0.1.0
    container_name: open-context-admin-ui
    ports:
      - "3001:80"
    depends_on:
      - open-context-core
    networks:
      - opencontext-network
    restart: unless-stopped

volumes:
  postgres_data:
  es_data:
  ollama_data:
  minio_data:

networks:
  opencontext-network:
    driver: bridge
